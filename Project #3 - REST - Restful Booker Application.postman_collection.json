{
	"info": {
		"_postman_id": "4fb8929f-261c-456b-bcbc-8fb17a48587d",
		"name": "Project #3 - REST - Restful Booker Application",
		"description": "1. **Req** - ï»¿restful-booker.herokuapp.com/apidoc/index.html\n    \n2. **Test Plan** -> docs.google.com/document/d/1UO54JPp_kVC-dQVCzek6F1aD76bxEX_p/edit?usp=sharing&ouid=104755920778477387077&rtpof=true&sd=true\n    \n    1. Remove the not required part\n        \n    2. Get it reviewed by the QA Lead/ PM\n        \n3. **Test Cases.**\n    \n\nTemplate - docs.google.com/spreadsheets/d/1EH1UJ9Qezgx_aZ0xim3KcVJUCEeR7A-7/edit?usp=sharing&ouid=104755920778477387077&rtpof=true&sd=true.\n\n4\\. **Test Execution** (Explore Application)\n\nImport the All the APIs(endpoints) -> POSTMAN\n\n5\\. **Test Closure -> Signoff**",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44410482"
	},
	"item": [
		{
			"name": "POST Operations",
			"item": [
				{
					"name": "Booking - CreateBooking - Curl Import",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Abhishek\");",
									"    pm.expect(response.lastname).to.eql(\"Sharma\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random first and last names",
									"pm.environment.set(\"firstname\", \"User\" + Math.floor(Math.random() * 1000));",
									"pm.environment.set(\"lastname\", \"LastName\" + Math.floor(Math.random() * 1000));",
									"",
									"// Generate random price between 100-1000",
									"pm.environment.set(\"totalprice\", Math.floor(Math.random() * 900) + 100);",
									"",
									"// Random true/false for deposit",
									"pm.environment.set(\"depositpaid\", Math.random() > 0.5);",
									"",
									"// Generate random dates (within next year)",
									"const today = new Date();",
									"const nextYear = new Date();",
									"nextYear.setFullYear(today.getFullYear() + 1);",
									"",
									"const randomCheckin = new Date(today.getTime() + Math.random() * (nextYear.getTime() - today.getTime()));",
									"const randomCheckout = new Date(randomCheckin.getTime() + Math.random() * (nextYear.getTime() - randomCheckin.getTime()));",
									"",
									"pm.environment.set(\"checkin\", randomCheckin.toISOString().split('T')[0]);",
									"pm.environment.set(\"checkout\", randomCheckout.toISOString().split('T')[0]);",
									"",
									"// Random additional needs",
									"const needs = [\"Breakfast\", \"Lunch\", \"Dinner\", \"WiFi\", \"Parking\", \"Spa\"];",
									"pm.environment.set(\"additionalneeds\", needs[Math.floor(Math.random() * needs.length)]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking",
						"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/booking \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
					},
					"response": []
				},
				{
					"name": "Verify booking with minimum required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    }\n    // \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with maximum length strings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"maximumlengthsssssssssssssssssssssssssssssssfdfdfdfdfdfdfdbfbfgbbfbbfbgfbfb\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"maximumlengthsssssssssssssssssssssssssssssssfdfdfdfdfdfdfdbfbfgbbfbbfbgfbfb\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with special characters in names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"R$peat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"R$peat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with totalprice as 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(0);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 0,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with depositpaid=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(false);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : false,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with invalid depositpaid (string)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : \"true\",\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with same checkin/checkout date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with invalid date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018,01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with far future dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with past dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with empty additionalneeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Repeat\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with missing firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"BreakfastAndLunch\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"BreakfastAndLunch\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with missing bookingdates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"BreakfastAndLunch\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"BreakfastAndLunch\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				},
				{
					"name": "Verify booking with empty bookingdates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for POST /booking",
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Booking ID is generated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.bookingid).to.be.a('number');",
									"    pm.expect(response.bookingid).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains booking details\", function() {",
									"    const response = pm.response.json().booking;",
									"    pm.expect(response.firstname).to.eql(\"Repeat\");",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"    pm.expect(response.totalprice).to.eql(111);",
									"    pm.expect(response.depositpaid).to.eql(true);",
									"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
									"    pm.expect(response.bookingdates.checkout).to.eql(\"2100-01-01\");",
									"    pm.expect(response.additionalneeds).to.eql(\"BreakfastAndLunch\");",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2100-01-01\"\n    },\n    \"additionalneeds\" : \"BreakfastAndLunch\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking"
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Operations",
			"item": [
				{
					"name": "Get All bookings",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking\n"
					},
					"response": []
				},
				{
					"name": "Get Single Booking",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}booking/1",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				},
				{
					"name": "Valid Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking/1",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				},
				{
					"name": "Invalid Booking ID (Non-existent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Non-Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking999999",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				},
				{
					"name": "Invalid Booking ID (Non-numeric)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Non-Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking99999LKZ",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				},
				{
					"name": "Missing Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Non-Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				},
				{
					"name": "Validate Response Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Non-Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}booking",
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify booking with extra fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Test Script for POST /booking",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Booking ID is generated\", function() {",
							"    const response = pm.response.json();",
							"    pm.expect(response.bookingid).to.be.a('number');",
							"    pm.expect(response.bookingid).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random first and last names",
							"pm.environment.set(\"firstname\", \"User\" + Math.floor(Math.random() * 1000));",
							"pm.environment.set(\"lastname\", \"LastName\" + Math.floor(Math.random() * 1000));",
							"",
							"// Generate random price between 100-1000",
							"pm.environment.set(\"totalprice\", Math.floor(Math.random() * 900) + 100);",
							"",
							"// Random true/false for deposit",
							"pm.environment.set(\"depositpaid\", Math.random() > 0.5);",
							"",
							"// Generate random dates (within next year)",
							"const today = new Date();",
							"const nextYear = new Date();",
							"nextYear.setFullYear(today.getFullYear() + 1);",
							"",
							"const randomCheckin = new Date(today.getTime() + Math.random() * (nextYear.getTime() - today.getTime()));",
							"const randomCheckout = new Date(randomCheckin.getTime() + Math.random() * (nextYear.getTime() - randomCheckin.getTime()));",
							"",
							"pm.environment.set(\"checkin\", randomCheckin.toISOString().split('T')[0]);",
							"pm.environment.set(\"checkout\", randomCheckout.toISOString().split('T')[0]);",
							"",
							"// Random additional needs",
							"const needs = [\"Breakfast\", \"Lunch\", \"Dinner\", \"WiFi\", \"Parking\", \"Spa\"];",
							"pm.environment.set(\"additionalneeds\", needs[Math.floor(Math.random() * needs.length)]);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\",\n    \"discount\": 10,\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}booking",
				"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/booking \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
			},
			"response": []
		},
		{
			"name": "Verify booking with malformed JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Test Script for POST /booking",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Booking ID is generated\", function() {",
							"    const response = pm.response.json();",
							"    pm.expect(response.bookingid).to.be.a('number');",
							"    pm.expect(response.bookingid).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response contains booking details\", function() {",
							"    const response = pm.response.json().booking;",
							"    pm.expect(response.firstname).to.eql(\"Abhishek\");",
							"    pm.expect(response.lastname).to.eql(\"Sharma\");",
							"    pm.expect(response.totalprice).to.eql(111);",
							"    pm.expect(response.depositpaid).to.eql(true);",
							"    pm.expect(response.bookingdates.checkin).to.eql(\"2018-01-01\");",
							"    pm.expect(response.bookingdates.checkout).to.eql(\"2019-01-01\");",
							"    pm.expect(response.additionalneeds).to.eql(\"Breakfast\");",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random first and last names",
							"pm.environment.set(\"firstname\", \"User\" + Math.floor(Math.random() * 1000));",
							"pm.environment.set(\"lastname\", \"LastName\" + Math.floor(Math.random() * 1000));",
							"",
							"// Generate random price between 100-1000",
							"pm.environment.set(\"totalprice\", Math.floor(Math.random() * 900) + 100);",
							"",
							"// Random true/false for deposit",
							"pm.environment.set(\"depositpaid\", Math.random() > 0.5);",
							"",
							"// Generate random dates (within next year)",
							"const today = new Date();",
							"const nextYear = new Date();",
							"nextYear.setFullYear(today.getFullYear() + 1);",
							"",
							"const randomCheckin = new Date(today.getTime() + Math.random() * (nextYear.getTime() - today.getTime()));",
							"const randomCheckout = new Date(randomCheckin.getTime() + Math.random() * (nextYear.getTime() - randomCheckin.getTime()));",
							"",
							"pm.environment.set(\"checkin\", randomCheckin.toISOString().split('T')[0]);",
							"pm.environment.set(\"checkout\", randomCheckout.toISOString().split('T')[0]);",
							"",
							"// Random additional needs",
							"const needs = [\"Breakfast\", \"Lunch\", \"Dinner\", \"WiFi\", \"Parking\", \"Spa\"];",
							"pm.environment.set(\"additionalneeds\", needs[Math.floor(Math.random() * needs.length)]);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\",{\n        \n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}booking",
				"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/booking \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
			},
			"response": []
		},
		{
			"name": "Verify response time < 1s",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Test Script for POST /booking",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function() {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Booking ID is generated\", function() {",
							"    const response = pm.response.json();",
							"    pm.expect(response.bookingid).to.be.a('number');",
							"    pm.expect(response.bookingid).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random first and last names",
							"pm.environment.set(\"firstname\", \"User\" + Math.floor(Math.random() * 1000));",
							"pm.environment.set(\"lastname\", \"LastName\" + Math.floor(Math.random() * 1000));",
							"",
							"// Generate random price between 100-1000",
							"pm.environment.set(\"totalprice\", Math.floor(Math.random() * 900) + 100);",
							"",
							"// Random true/false for deposit",
							"pm.environment.set(\"depositpaid\", Math.random() > 0.5);",
							"",
							"// Generate random dates (within next year)",
							"const today = new Date();",
							"const nextYear = new Date();",
							"nextYear.setFullYear(today.getFullYear() + 1);",
							"",
							"const randomCheckin = new Date(today.getTime() + Math.random() * (nextYear.getTime() - today.getTime()));",
							"const randomCheckout = new Date(randomCheckin.getTime() + Math.random() * (nextYear.getTime() - randomCheckin.getTime()));",
							"",
							"pm.environment.set(\"checkin\", randomCheckin.toISOString().split('T')[0]);",
							"pm.environment.set(\"checkout\", randomCheckout.toISOString().split('T')[0]);",
							"",
							"// Random additional needs",
							"const needs = [\"Breakfast\", \"Lunch\", \"Dinner\", \"WiFi\", \"Parking\", \"Spa\"];",
							"pm.environment.set(\"additionalneeds\", needs[Math.floor(Math.random() * needs.length)]);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}booking",
				"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/booking \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
			},
			"response": []
		},
		{
			"name": "Ping Request ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    const response = await pm.sendRequest({",
							"        url: \"https://postman-echo.com/get\",",
							"        method: \"GET\"",
							"    });",
							"",
							"    console.log(response.json());",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://restful-booker.herokuapp.com/ping",
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/ping\n"
			},
			"response": []
		},
		{
			"name": "Create Token",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://restful-booker.herokuapp.com/auth",
				"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/auth \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}'"
			},
			"response": []
		},
		{
			"name": "Partial Update - PUT Booking",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://restful-booker.herokuapp.com/booking/1",
				"description": "Generated from cURL: curl -X PATCH \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cookie: token=abc123' \\\n  -d '{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\"\n}'"
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": "https://restful-booker.herokuapp.com/booking/1",
				"description": "Generated from cURL: curl -X DELETE \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Cookie: token=abc123'"
			},
			"response": []
		},
		{
			"name": "Full Update Booking (Patch)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://restful-booker.herokuapp.com/booking/1",
				"description": "Generated from cURL: curl -X PUT \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cookie: token=abc123' \\\n  -d '{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
			},
			"response": []
		}
	]
}